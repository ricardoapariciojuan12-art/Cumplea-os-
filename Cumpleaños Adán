<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Felicidades Cristian AdÃ¡n Aparicio Juan ðŸ‡²ðŸ‡½</title>
  <style>
    :root { --bg:#0b0f18; --txt:#fff; }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin:0;
      background: radial-gradient(1200px 800px at 50% 80%, #111826 0%, #0b0f18 60%, #05070b 100%);
      color: var(--txt);
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", Ubuntu, Cantarell, Arial, "Apple Color Emoji", "Noto Color Emoji", "Segoe UI Emoji", sans-serif;
      overflow: hidden;
    }
    #fireworks { position: fixed; inset: 0; z-index: 0; display: block; }
    .main { position: relative; z-index: 1; height: 100%; display: grid; place-items: center; text-align: center; padding: 24px; }
    .card { backdrop-filter: blur(6px) saturate(140%); background: rgba(255,255,255,0.06); border: 1px solid rgba(255,255,255,0.18); border-radius: 24px; padding: 24px 28px; max-width: 920px; box-shadow: 0 10px 40px rgba(0,0,0,0.45); }
    .flag { font-size: clamp(64px, 12vw, 120px); line-height: 1; margin-bottom: 8px; }
    h1 { font-size: clamp(28px, 5vw, 52px); margin: 0 0 8px; text-shadow: 0 2px 12px rgba(0,0,0,0.6); }
    p.subtitle { font-size: clamp(18px, 2.8vw, 26px); margin: 0 0 12px; opacity: .95; }
    .hint { font-size: clamp(12px, 1.8vw, 14px); opacity: .85; margin-top: 8px; }
    .btns { margin-top: 14px; display:flex; gap:12px; justify-content:center; flex-wrap:wrap; }
    button { border: none; border-radius: 999px; padding: 10px 16px; font-weight: 600; cursor: pointer; background: #ffffff18; color: var(--txt); outline: 1px solid #ffffff30; }
    button:hover { background:#ffffff28; }

    /* Bandera de MÃ©xico (bandas) */
    .flag-bands {
      --w: clamp(220px, 50vw, 380px);
      width: var(--w); height: calc(var(--w) * 2 / 3); border-radius: 10px; overflow: hidden; margin: 10px auto 0; box-shadow:0 6px 24px rgba(0,0,0,.35), 0 0 0 1px rgba(255,255,255,.2) inset;
      display: grid; grid-template-columns: 1fr 1fr 1fr;
    }
    .flag-bands span:nth-child(1){ background:#006847; }
    .flag-bands span:nth-child(2){ background:#ffffff; position: relative; }
    .flag-bands span:nth-child(3){ background:#ce1126; }
    .flag-bands .emblem { position:absolute; inset:0; display:grid; place-items:center; font-size: clamp(32px, 6vw, 64px); }

    @media (prefers-reduced-motion: reduce) {
      #fireworks { display: none; }
      .hint:after { content: " (animaciones limitadas por tu configuraciÃ³n de accesibilidad)"; font-size: 12px; opacity: .8; }
    }
  </style>
</head>
<body>
  <canvas id="fireworks" aria-hidden="true"></canvas>
  <main class="main">
    <div class="card" role="group" aria-label="FelicitaciÃ³n">
      <div class="flag" aria-hidden="true">ðŸ‡²ðŸ‡½</div>
      <h1>Felicidades Cristian AdÃ¡n Aparicio Juan</h1>
      <p class="subtitle">hoy por ser un dÃ­a especial para tÃ­.</p>
      <div class="flag-bands" aria-label="Bandera de MÃ©xico">
        <span></span>
        <span>
          <div class="emblem" aria-hidden="true">ðŸ‡²ðŸ‡½</div>
        </span>
        <span></span>
      </div>
      <div class="btns">
        <button id="burstBtn" type="button" aria-label="Lanzar fuegos artificiales">Lanzar fuegos artificiales</button>
        <button id="toggleBtn" type="button" aria-pressed="true" aria-label="Pausar animaciÃ³n">Pausar</button>
      </div>
      <div class="hint">Toca o haz clic en cualquier lugar para lanzar mÃ¡s fuegos artificiales.</div>
    </div>
  </main>

  <script>
  (() => {
    const canvas = document.getElementById('fireworks');
    const ctx = canvas.getContext('2d', { alpha: true });
    const particles = [];
    let running = true;
    let lastTime = 0;
    const DPR = Math.max(1, Math.min(2, window.devicePixelRatio || 1));

    function resize() {
      const { innerWidth:w, innerHeight:h } = window;
      canvas.width = Math.floor(w * DPR);
      canvas.height = Math.floor(h * DPR);
      canvas.style.width = w + 'px';
      canvas.style.height = h + 'px';
      ctx.setTransform(DPR, 0, 0, DPR, 0, 0);
    }
    window.addEventListener('resize', resize, { passive: true });
    resize();

    class Particle {
      constructor(x, y, color) {
        const angle = Math.random() * Math.PI * 2;
        const speed = 2 + Math.random() * 4.5; // px/frame baseline
        this.x = x; this.y = y;
        this.vx = Math.cos(angle) * speed;
        this.vy = Math.sin(angle) * speed;
        this.alpha = 1;
        this.life = 60 + Math.random()*40; // frames
        this.size = 1 + Math.random()*2.5;
        this.color = color;
        this.gravity = 0.05 + Math.random()*0.05;
        this.drag = 0.985 - Math.random()*0.01;
        this.twinkle = Math.random() < 0.2;
      }
      step() {
        this.vx *= this.drag;
        this.vy = this.vy * this.drag + this.gravity;
        this.x += this.vx;
        this.y += this.vy;
        this.life -= 1;
        this.alpha = Math.max(0, this.life / 80);
        if (this.twinkle && Math.random() < 0.05) this.alpha *= 0.5;
        return this.life > 0 && this.alpha > 0.02;
      }
      draw() {
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI*2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
    }

    function hsl(h, s, l) { return `hsl(${h} ${s}% ${l}%)`; }

    function explode(x, y) {
      const palette = Math.random() < 0.5
        ? [0, 120, 140].map(h => (h + Math.random()*20) % 360) // tonos patrios y afines
        : [10, 40, 60, 0, 120, 220].map(h => (h + Math.random()*10) % 360);
      const count = 90 + Math.floor(Math.random()*60);
      for (let i=0;i<count;i++) {
        const hue = palette[Math.floor(Math.random()*palette.length)];
        const sat = 80 + Math.floor(Math.random()*20);
        const light = 55 + Math.floor(Math.random()*20);
        particles.push(new Particle(x, y, hsl(hue, sat, light)));
      }
      // destello central
      ctx.save();
      ctx.globalCompositeOperation = 'lighter';
      ctx.globalAlpha = 0.35;
      ctx.beginPath();
      ctx.arc(x, y, 30, 0, Math.PI*2);
      ctx.fillStyle = 'white';
      ctx.fill();
      ctx.restore();
    }

    function randomExplode() {
      if (!running) return;
      const w = canvas.clientWidth, h = canvas.clientHeight;
      const x = 40 + Math.random()*(w-80);
      const y = 60 + Math.random()*(h*0.6);
      explode(x, y);
    }

    let interval = setInterval(randomExplode, 900);

    function animate(ts) {
      if (!running) { requestAnimationFrame(animate); return; }
      const dt = ts - lastTime; lastTime = ts;
      // desvanecer para dejar estelas
      ctx.globalCompositeOperation = 'destination-out';
      ctx.globalAlpha = 0.2;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.globalCompositeOperation = 'lighter';
      ctx.globalAlpha = 1;

      for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i];
        if (p.step()) { p.draw(); }
        else particles.splice(i, 1);
      }
      requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);

    function handlePointer(e) {
      const rect = canvas.getBoundingClientRect();
      const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left;
      const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;
      explode(x, y);
    }
    canvas.addEventListener('click', handlePointer);
    canvas.addEventListener('touchstart', handlePointer, { passive: true });

    // Botones de control
    document.getElementById('burstBtn').addEventListener('click', () => {
      const w = canvas.clientWidth, h = canvas.clientHeight;
      explode(w/2, h*0.35);
      explode(w*0.25, h*0.45);
      explode(w*0.75, h*0.45);
    });

    const toggleBtn = document.getElementById('toggleBtn');
    toggleBtn.addEventListener('click', () => {
      running = !running;
      toggleBtn.textContent = running ? 'Pausar' : 'Reanudar';
      toggleBtn.setAttribute('aria-pressed', running ? 'true' : 'false');
      if (running) {
        lastTime = performance.now();
        requestAnimationFrame(animate);
        randomExplode();
        interval = setInterval(randomExplode, 900);
      } else {
        clearInterval(interval);
      }
    });
  })();
  </script>
</body>
</html>
